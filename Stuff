can you tell me how to start a 2 Availability zone with ovn-ic, a extenal network and a transit switch

I'll help you set up a 2 Availability Zone configuration with OVN-IC (OVN Interconnect), an external network, and a transit switch. This is commonly used in OpenStack deployments for multi-site networking.

Here's a step-by-step guide:
Prerequisites

    OVN Central services running on both AZs
        OVN-IC database and controller services
            Network connectivity between AZs

            1. Configure OVN-IC Database

            First, set up the OVN-IC database (typically on a shared location or replicated):
            bash

# Initialize OVN-IC database
ovsdb-tool create /etc/openvswitch/ovn-ic-nb.db /usr/share/openvswitch/ovn-ic-nb.ovsschema
ovsdb-tool create /etc/openvswitch/ovn-ic-sb.db /usr/share/openvswitch/ovn-ic-sb.ovsschema

# Start OVN-IC databases
ovsdb-server --remote=ptcp:6645:0.0.0.0 --pidfile --detach /etc/openvswitch/ovn-ic-nb.db
ovsdb-server --remote=ptcp:6646:0.0.0.0 --pidfile --detach /etc/openvswitch/ovn-ic-sb.db

2. Configure Each Availability Zone
AZ1 Configuration:
bash

# Set the AZ name
ovn-nbctl set NB_Global . name=az1

# Configure connection to IC databases
ovn-ic --ovnnb-db=tcp:127.0.0.1:6641 --ovnsb-db=tcp:127.0.0.1:6642 \
       --ic-nb-db=tcp:<IC_DB_IP>:6645 --ic-sb-db=tcp:<IC_DB_IP>:6646 \
              --pidfile --detach

              AZ2 Configuration:
              bash

# Set the AZ name
ovn-nbctl set NB_Global . name=az2

# Configure connection to IC databases
ovn-ic --ovnnb-db=tcp:127.0.0.1:6641 --ovnsb-db=tcp:127.0.0.1:6642 \
       --ic-nb-db=tcp:<IC_DB_IP>:6645 --ic-sb-db=tcp:<IC_DB_IP>:6646 \
              --pidfile --detach

              3. Create Transit Switch

              The transit switch connects the two AZs:
              bash

# Create transit switch (run this on IC database)
ovn-ic-nbctl ts-add transit-switch

# Verify transit switch creation
ovn-ic-nbctl show

4. Configure Gateway Nodes

On each AZ, configure gateway nodes for inter-AZ communication:
AZ1 Gateway:
bash

# Create gateway chassis
ovs-vsctl set open_vswitch . external-ids:ovn-is-interconn=true

# Set gateway chassis priority
ovn-sbctl chassis-add gw-az1 geneve 192.168.1.10
ovn-nbctl set chassis gw-az1 other-config:is-interconn=true

AZ2 Gateway:
bash

# Create gateway chassis
ovs-vsctl set open_vswitch . external-ids:ovn-is-interconn=true

# Set gateway chassis priority
ovn-sbctl chassis-add gw-az2 geneve 192.168.2.10
ovn-nbctl set chassis gw-az2 other-config:is-interconn=true

5. Create External Network

Configure external network connectivity:
bash

# Create external network logical switch in each AZ
# AZ1:
ovn-nbctl ls-add external-network-az1
ovn-nbctl lsp-add external-network-az1 external-port-az1
ovn-nbctl lsp-set-type external-port-az1 localnet
ovn-nbctl lsp-set-options external-port-az1 network_name=provider

# AZ2:
ovn-nbctl ls-add external-network-az2
ovn-nbctl lsp-add external-network-az2 external-port-az2
ovn-nbctl lsp-set-type external-port-az2 localnet
ovn-nbctl lsp-set-options external-port-az2 network_name=provider

6. Configure Physical Network Mapping

On each compute/gateway node:
bash

# Map logical network to physical interface
ovs-vsctl set open_vswitch . external-ids:ovn-bridge-mappings=provider:br-provider

# Create provider bridge and add physical interface
ovs-vsctl add-br br-provider
ovs-vsctl add-port br-provider eth1  # Replace with your external interface

7. Create Inter-AZ Connectivity

Configure logical routers for inter-AZ routing:
bash

# AZ1 Router
ovn-nbctl lr-add router-az1
ovn-nbctl lrp-add router-az1 router-az1-transit 02:ac:10:ff:01:01 10.0.0.1/24
ovn-nbctl lsp-add transit-switch transit-az1
ovn-nbctl lsp-set-type transit-az1 router
ovn-nbctl lsp-set-options transit-az1 router-port=router-az1-transit

# AZ2 Router  
ovn-nbctl lr-add router-az2
ovn-nbctl lrp-add router-az2 router-az2-transit 02:ac:10:ff:01:02 10.0.0.2/24
ovn-nbctl lsp-add transit-switch transit-az2
ovn-nbctl lsp-set-type transit-az2 router
ovn-nbctl lsp-set-options transit-az2 router-port=router-az2-transit

8. Verification Commands
bash

# Check IC status
ovn-ic-nbctl show
ovn-ic-sbctl show

# Verify transit switch
ovn-ic-nbctl ts-list

# Check AZ connectivity
ovn-nbctl show
ovn-sbctl show

# Test connectivity between AZs
ping <remote-az-ip>

Key Points:

    Transit Switch: Provides L2 connectivity between AZs
        Gateway Chassis: Handle inter-AZ traffic routing
            External Networks: Provide north-south connectivity
                IC Database: Central coordination point for multi-AZ setup

                This setup provides redundancy, scalability, and proper network isolation between availability zones while maintaining connectivity through the transit switch and external network access.

                Do the AZ configurations need to be run in a container

                No, the AZ configurations don't necessarily need to be run in containers, but it depends on your deployment method and environment. Let me clarify the different approaches:
                Deployment Options
                1. Bare Metal/VM Deployment (Traditional)
                bash

# Install OVN packages directly on the host
sudo apt-get install ovn-central ovn-host ovn-common  # Ubuntu/Debian
# or
sudo yum install openvswitch-ovn-central openvswitch-ovn-host  # RHEL/CentOS

# Run services directly
systemctl start ovn-northd
systemctl start ovn-controller
systemctl start ovn-ic

2. Container Deployment

Many modern deployments use containers for easier management:
bash

# Example with Docker
docker run -d --name ovn-nb-db \
  --network host \
    -v /var/lib/ovn:/var/lib/ovn \
      ovn/ovn-nb-db:latest

      docker run -d --name ovn-northd \
        --network host \
          ovn/ovn-northd:latest

          docker run -d --name ovn-ic \
            --network host \
              ovn/ovn-ic:latest

              3. Kubernetes Deployment

              If you're using Kubernetes, you'd typically use operators:
              yaml

              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: ovn-ic
                spec:
                  replicas: 1
                    selector:
                        matchLabels:
                              app: ovn-ic
                                template:
                                    spec:
                                          containers:
                                                - name: ovn-ic
                                                        image: ovn/ovn-ic:latest
                                                                env:
                                                                        - name: OVN_NB_DB
                                                                                  value: "tcp:ovn-nb-db:6641"

                                                                                  4. OpenStack with Containers

                                                                                  OpenStack deployments often use containerized OVN:
                                                                                  yaml

# Example Kolla-Ansible configuration
ovn_nb_db_image: "{{ docker_registry }}/ovn-nb-db:{{ openstack_tag }}"
ovn_sb_db_image: "{{ docker_registry }}/ovn-sb-db:{{ openstack_tag }}"
ovn_northd_image: "{{ docker_registry }}/ovn-northd:{{ openstack_tag }}"

Recommendations by Use Case
Use Containers When:

    Deploying with OpenStack (Kolla, TripleO, etc.)
        Using Kubernetes orchestration
            Want easier upgrades and rollbacks
                Need consistent environments
                    Using CI/CD pipelines

                    Use Bare Metal/VM When:

                        Simple, single-purpose deployments
                            Maximum performance requirements
                                Existing infrastructure management tools
                                    Direct hardware access needs

                                    Hybrid Approach Example

                                    You can also mix approaches:
                                    bash

# Core OVN services in containers
docker run -d --name ovn-central \
  --network host \
    --privileged \
      -v /var/lib/ovn:/var/lib/ovn \
        -v /var/run/ovn:/var/run/ovn \
          ovn/ovn-central:latest

# OVS and ovn-controller on host for performance
systemctl start openvswitch-switch
systemctl start ovn-controller

Container Considerations

Advantages:

    Easier deployment and scaling
        Version consistency
            Resource isolation
                Simplified upgrades

                Considerations:

                    Network performance (use --network host)
                        Privileged access for OVS kernel modules
                            Persistent storage for databases
                                Proper volume mounts for sockets

                                The choice depends on your specific infrastructure, orchestration tools, and operational preferences. Many production deployments today use containers for easier management, but bare metal installations are perfectly valid and sometimes preferred for performance-critical scenarios.

                                how do the ovn-ic processes know which az they are in?

                                Great question! OVN-IC processes determine which AZ they belong to through several configuration mechanisms. Let me explain the different methods:
                                1. NB_Global.name Setting (Primary Method)

                                The most common way is setting the name field in the NB_Global table:
                                bash

# AZ1
ovn-nbctl set NB_Global . name=az1

# AZ2  
ovn-nbctl set NB_Global . name=az2

# Verify the setting
ovn-nbctl get NB_Global . name

This name becomes the Availability Zone identifier that OVN-IC uses to distinguish between different zones.
2. External-IDs Method

You can also use external-ids for more explicit configuration:
bash

# Set AZ name via external-ids
ovn-nbctl set NB_Global . external-ids:ovn-ic-az-name=az1

# Or set multiple identifiers
ovn-nbctl set NB_Global . external-ids:availability-zone=us-west-1a
ovn-nbctl set NB_Global . external-ids:region=us-west-1

3. OVN-IC Process Startup Configuration

When starting ovn-ic, you can specify which databases it connects to:
bash

# AZ1's ovn-ic process
ovn-ic \
  --ovnnb-db=tcp:127.0.0.1:6641 \      # Local NB DB for AZ1
    --ovnsb-db=tcp:127.0.0.1:6642 \      # Local SB DB for AZ1
      --ic-nb-db=tcp:ic-server:6645 \      # Shared IC NB DB
        --ic-sb-db=tcp:ic-server:6646 \      # Shared IC SB DB
          --pidfile --detach

# AZ2's ovn-ic process  
ovn-ic \
  --ovnnb-db=tcp:127.0.0.1:6641 \      # Local NB DB for AZ2
    --ovnsb-db=tcp:127.0.0.1:6642 \      # Local SB DB for AZ2
      --ic-nb-db=tcp:ic-server:6645 \      # Shared IC NB DB (same)
        --ic-sb-db=tcp:ic-server:6646 \      # Shared IC SB DB (same)
          --pidfile --detach

          4. How OVN-IC Uses AZ Identity

          Once configured, here's how the system works:
          Registration Process:
          bash

# OVN-IC registers the AZ in the IC database
ovn-ic-nbctl show
# Output shows:
# availability-zone az1
#   gateway gw1
#     hostname: node1.az1.local
#     type: geneve
#     ip: 192.168.1.10
# availability-zone az2  
#   gateway gw2
#     hostname: node1.az2.local
#     type: geneve
#     ip: 192.168.2.10

Transit Switch Association:
bash

# Check which AZs are connected to transit switches
ovn-ic-nbctl ts-list
ovn-ic-nbctl ts-get-switch transit-switch

# Shows AZ participation
ovn-ic-sbctl show

5. Verification Commands
bash

# Check local AZ name
ovn-nbctl get NB_Global . name

# Check what IC database sees
ovn-ic-nbctl show

# Verify AZ registration in IC SB
ovn-ic-sbctl list Availability_Zone

# Check gateway associations
ovn-ic-sbctl list Gateway

6. Configuration File Method

You can also set this in OVN configuration files:
bash

# /etc/ovn/ovn.conf or similar
[ic]
ovn-nb-db=tcp:127.0.0.1:6641
ovn-sb-db=tcp:127.0.0.1:6642  
ic-nb-db=tcp:ic-server:6645
ic-sb-db=tcp:ic-server:6646
az-name=az1

7. Environment Variables

Some deployments use environment variables:
bash

export OVN_IC_AZ_NAME="az1"
export OVN_NB_DB="tcp:127.0.0.1:6641"
export OVN_IC_NB_DB="tcp:ic-server:6645"

ovn-ic --pidfile --detach

Key Points:

    Each ovn-ic process connects to its local NB/SB databases AND the shared IC databases
        The AZ name from NB_Global.name becomes the identifier in the IC database
            Multiple ovn-ic processes with the same AZ name are treated as the same zone
                Gateway chassis within an AZ automatically inherit the AZ identity

                Troubleshooting AZ Identity:
                bash

# If AZ identity is missing or wrong:
ovn-nbctl list NB_Global
ovn-ic-sbctl list Availability_Zone

# Reset AZ name:
ovn-nbctl set NB_Global . name=correct-az-name

# Restart ovn-ic to re-register:
systemctl restart ovn-ic

The AZ identity is crucial because it determines how transit switches, gateways, and inter-AZ routing are configured in the OVN-IC system.

are az 1 and 2 running on different platforms?

Yes, typically AZ1 and AZ2 would run on different physical infrastructure to provide true availability zone redundancy. Here are the common deployment patterns:
Typical Multi-AZ Deployments:
1. Different Data Centers

AZ1: Data Center A (New York)
├── Physical servers: server1-ny, server2-ny, server3-ny
├── Network: 10.1.0.0/16
├── OVN NB/SB: ovn-db-ny
└── Gateway: gw1-ny (192.168.1.10)

AZ2: Data Center B (Virginia)  
├── Physical servers: server1-va, server2-va, server3-va
├── Network: 10.2.0.0/16
├── OVN NB/SB: ovn-db-va
└── Gateway: gw2-va (192.168.2.10)

IC Database: Shared/Replicated between both DCs

2. Different Rack/Network Segments

Same Data Center, Different Infrastructure:

AZ1: Rack A + Network Segment 1
AZ2: Rack B + Network Segment 2

3. Cloud Provider Regions

AZ1: AWS us-east-1a / OpenStack Region 1
AZ2: AWS us-east-1b / OpenStack Region 2

Platform Configurations:
Scenario 1: Completely Separate Platforms
bash

# AZ1 Infrastructure
Host: ovn-controller-az1.dc1.company.com
IP: 10.1.1.10
OVN NB: tcp:10.1.1.11:6641
OVN SB: tcp:10.1.1.12:6642

# AZ2 Infrastructure  
Host: ovn-controller-az2.dc2.company.com
IP: 10.2.1.10
OVN NB: tcp:10.2.1.11:6641
OVN SB: tcp:10.2.1.12:6642

# Shared IC Database (could be replicated)
IC NB: tcp:ic-shared.company.com:6645
IC SB: tcp:ic-shared.company.com:6646

Scenario 2: Same Platform, Different Clusters
bash

# Kubernetes example
AZ1: k8s-cluster-east
  └── Namespace: ovn-az1
    
    AZ2: k8s-cluster-west  
      └── Namespace: ovn-az2

      Example OpenStack Multi-AZ Setup:
      yaml

# AZ1 - OpenStack Controller 1
availability_zones:
  - az1
  nova_availability_zones:
    - az1
    ovn_availability_zone: az1

# AZ2 - OpenStack Controller 2  
availability_zones:
  - az2
  nova_availability_zones:
    - az2
    ovn_availability_zone: az2

    Network Connectivity Between AZs:

    The AZs need network connectivity for:
    Inter-AZ Communication:
    bash

# Gateway-to-Gateway connectivity
AZ1 Gateway: 192.168.1.10 ←→ AZ2 Gateway: 192.168.2.10

# IC Database access (both AZs connect to shared IC)
AZ1 ovn-ic → IC Database ← AZ2 ovn-ic

Example Network Architecture:

┌─────────────────┐    ┌─────────────────┐
│       AZ1       │    │       AZ2       │
│  (Physical DC1) │    │  (Physical DC2) │
│                 │    │                 │
│ ┌─────────────┐ │    │ ┌─────────────┐ │
│ │   OVN-IC    │ │    │ │   OVN-IC    │ │
│ │   Process   │ │────┼─│   Process   │ │
│ └─────────────┘ │    │ └─────────────┘ │
│       │         │    │       │         │
│ ┌─────▼─────┐   │    │ ┌─────▼─────┐   │
│ │Local NB/SB│   │    │ │Local NB/SB│   │
│ │ Database  │   │    │ │ Database  │   │
│ └───────────┘   │    │ └───────────┘   │
└─────────────────┘    └─────────────────┘
         │                       │
                  └───────────────────────┘
                                      │
                                                    ┌─────▼─────┐
                                                                  │Shared IC  │
                                                                                │ Database  │
                                                                                              └───────────┘

                                                                                              Can They Run on Same Platform?

                                                                                              Yes, but it defeats the purpose of "availability zones":
                                                                                              bash

# Same server, different processes (NOT recommended for production)
Server: single-host.company.com

# AZ1 processes
ovn-nbctl --db=unix:/var/run/ovn/ovnnb_db_az1.sock
ovn-ic --ovnnb-db=unix:/var/run/ovn/ovnnb_db_az1.sock

# AZ2 processes  
ovn-nbctl --db=unix:/var/run/ovn/ovnnb_db_az2.sock
ovn-ic --ovnnb-db=unix:/var/run/ovn/ovnnb_db_az2.sock

This would only be useful for:

    Testing/development
        Learning OVN-IC concepts
            Simulating multi-AZ in labs

            Production Recommendations:

                Physical Separation: Different servers, racks, or data centers
                    Network Separation: Different network segments with redundant connectivity
                        Power Separation: Different power sources/UPS systems
                            Geographic Separation: Different locations for disaster recovery

                            The whole point of availability zones is to provide fault isolation - if AZ1 goes down (power, network, hardware failure), AZ2 should continue operating independently.

                            I want to run both AZs on the same system

                            That's perfectly fine for testing, development, or learning purposes! Running both AZs on the same system is a great way to understand OVN-IC concepts without needing multiple physical machines. Here's how to set it up:
                            Single System Multi-AZ Setup
                            Directory Structure
                            bash

# Create separate directories for each AZ
sudo mkdir -p /var/lib/ovn/{az1,az2,ic}
sudo mkdir -p /var/run/ovn/{az1,az2,ic}
sudo mkdir -p /var/log/ovn/{az1,az2,ic}

1. Start IC Databases First
bash

# IC NB Database
ovsdb-tool create /var/lib/ovn/ic/ovn-ic-nb.db /usr/share/openvswitch/ovn-ic-nb.ovsschema
ovsdb-server --remote=ptcp:6645:127.0.0.1 \
  --pidfile=/var/run/ovn/ic/ovn-ic-nb.pid \
    --log-file=/var/log/ovn/ic/ovn-ic-nb.log \
      --detach /var/lib/ovn/ic/ovn-ic-nb.db

# IC SB Database  
ovsdb-tool create /var/lib/ovn/ic/ovn-ic-sb.db /usr/share/openvswitch/ovn-ic-sb.ovsschema
ovsdb-server --remote=ptcp:6646:127.0.0.1 \
  --pidfile=/var/run/ovn/ic/ovn-ic-sb.pid \
    --log-file=/var/log/ovn/ic/ovn-ic-sb.log \
      --detach /var/lib/ovn/ic/ovn-ic-sb.db

      2. Setup AZ1
      bash

# AZ1 NB Database
ovsdb-tool create /var/lib/ovn/az1/ovn-nb.db /usr/share/openvswitch/ovn-nb.ovsschema
ovsdb-server --remote=ptcp:6641:127.0.0.1 \
  --pidfile=/var/run/ovn/az1/ovn-nb.pid \
    --log-file=/var/log/ovn/az1/ovn-nb.log \
      --detach /var/lib/ovn/az1/ovn-nb.db

# AZ1 SB Database
ovsdb-tool create /var/lib/ovn/az1/ovn-sb.db /usr/share/openvswitch/ovn-sb.ovsschema
ovsdb-server --remote=ptcp:6642:127.0.0.1 \
  --pidfile=/var/run/ovn/az1/ovn-sb.pid \
    --log-file=/var/log/ovn/az1/ovn-sb.log \
      --detach /var/lib/ovn/az1/ovn-sb.db

# AZ1 Northd
ovn-northd --ovnnb-db=tcp:127.0.0.1:6641 --ovnsb-db=tcp:127.0.0.1:6642 \
  --pidfile=/var/run/ovn/az1/ovn-northd.pid \
    --log-file=/var/log/ovn/az1/ovn-northd.log \
      --detach

# Set AZ1 name
ovn-nbctl --db=tcp:127.0.0.1:6641 set NB_Global . name=az1

# AZ1 IC Process
ovn-ic --ovnnb-db=tcp:127.0.0.1:6641 --ovnsb-db=tcp:127.0.0.1:6642 \
  --ic-nb-db=tcp:127.0.0.1:6645 --ic-sb-db=tcp:127.0.0.1:6646 \
    --pidfile=/var/run/ovn/az1/ovn-ic.pid \
      --log-file=/var/log/ovn/az1/ovn-ic.log \
        --detach

        3. Setup AZ2
        bash

# AZ2 NB Database
ovsdb-tool create /var/lib/ovn/az2/ovn-nb.db /usr/share/openvswitch/ovn-nb.ovsschema
ovsdb-server --remote=ptcp:6651:127.0.0.1 \
  --pidfile=/var/run/ovn/az2/ovn-nb.pid \
    --log-file=/var/log/ovn/az2/ovn-nb.log \
      --detach /var/lib/ovn/az2/ovn-nb.db

# AZ2 SB Database
ovsdb-tool create /var/lib/ovn/az2/ovn-sb.db /usr/share/openvswitch/ovn-sb.ovsschema
ovsdb-server --remote=ptcp:6652:127.0.0.1 \
  --pidfile=/var/run/ovn/az2/ovn-sb.pid \
    --log-file=/var/log/ovn/az2/ovn-sb.log \
      --detach /var/lib/ovn/az2/ovn-sb.db

# AZ2 Northd
ovn-northd --ovnnb-db=tcp:127.0.0.1:6651 --ovnsb-db=tcp:127.0.0.1:6652 \
  --pidfile=/var/run/ovn/az2/ovn-northd.pid \
    --log-file=/var/log/ovn/az2/ovn-northd.log \
      --detach

# Set AZ2 name
ovn-nbctl --db=tcp:127.0.0.1:6651 set NB_Global . name=az2

# AZ2 IC Process
ovn-ic --ovnnb-db=tcp:127.0.0.1:6651 --ovnsb-db=tcp:127.0.0.1:6652 \
  --ic-nb-db=tcp:127.0.0.1:6645 --ic-sb-db=tcp:127.0.0.1:6646 \
    --pidfile=/var/run/ovn/az2/ovn-ic.pid \
      --log-file=/var/log/ovn/az2/ovn-ic.log \
        --detach

        4. Port Summary

        IC NB Database: 6645
        IC SB Database: 6646
        AZ1 NB Database: 6641
        AZ1 SB Database: 6642
        AZ2 NB Database: 6651
        AZ2 SB Database: 6652

        5. Create Transit Switch
        bash

# Create transit switch
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 ts-add transit-switch

6. Verification Commands
bash

# Check IC status
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 show

# Check AZ1 
ovn-nbctl --db=tcp:127.0.0.1:6641 show
ovn-sbctl --db=tcp:127.0.0.1:6642 show

# Check AZ2
ovn-nbctl --db=tcp:127.0.0.1:6651 show  
ovn-sbctl --db=tcp:127.0.0.1:6652 show

# Check IC SB for registered AZs
ovn-ic-sbctl --db=tcp:127.0.0.1:6646 list Availability_Zone

7. Environment Variables for Convenience
bash

# Add to ~/.bashrc
export OVN_IC_NB_DB="tcp:127.0.0.1:6645"
export OVN_IC_SB_DB="tcp:127.0.0.1:6646"
export OVN_AZ1_NB_DB="tcp:127.0.0.1:6641"
export OVN_AZ1_SB_DB="tcp:127.0.0.1:6642"  
export OVN_AZ2_NB_DB="tcp:127.0.0.1:6651"
export OVN_AZ2_SB_DB="tcp:127.0.0.1:6652"

# Usage examples
ovn-nbctl --db=$OVN_AZ1_NB_DB ls-list
ovn-nbctl --db=$OVN_AZ2_NB_DB ls-list
ovn-ic-nbctl --db=$OVN_IC_NB_DB show

8. Systemd Service Files (Optional)

Create service files for easier management:
bash

# /etc/systemd/system/ovn-ic-nb.service
[Unit]
Description=OVN IC Northbound Database
After=network.target

[Service]
Type=forking
ExecStart=ovsdb-server --remote=ptcp:6645:127.0.0.1 --pidfile --detach /var/lib/ovn/ic/ovn-ic-nb.db
PIDFile=/var/run/openvswitch/ovsdb-server.pid
Restart=always

[Install]
WantedBy=multi-user.target

9. Management Scripts

Create helper scripts:
bash

#!/bin/bash
# start-multi-az.sh
echo "Starting IC databases..."
# Start IC databases first
# Then start AZ1 services  
# Then start AZ2 services
echo "Multi-AZ OVN setup complete!"

#!/bin/bash  
# stop-multi-az.sh
echo "Stopping all OVN services..."
pkill -f "ovn-ic"
pkill -f "ovn-northd" 
pkill -f "ovsdb-server.*ovn"

This setup gives you a fully functional multi-AZ OVN-IC environment on a single machine, perfect for learning and testing!

can you add the external network to the single platform multi AZ setup

Absolutely! I'll add external network configuration to the single platform multi-AZ setup. Here's the complete configuration with external networks:
Enhanced Single System Multi-AZ Setup with External Networks
1. Prerequisites - OVS Bridge Setup

First, create the provider bridges for external connectivity:
bash

# Create provider bridge for external network
ovs-vsctl add-br br-provider

# Add physical interface (replace eth1 with your external interface)
ovs-vsctl add-port br-provider eth1

# Or create a dummy interface for testing
ip link add dummy-ext type dummy
ip link set dummy-ext up
ovs-vsctl add-port br-provider dummy-ext

# Set up bridge mappings for both AZs
ovs-vsctl set open_vswitch . external-ids:ovn-bridge-mappings=provider:br-provider

2. Start All Services (Updated)
bash

# Create directories
sudo mkdir -p /var/lib/ovn/{az1,az2,ic}
sudo mkdir -p /var/run/ovn/{az1,az2,ic}
sudo mkdir -p /var/log/ovn/{az1,az2,ic}

# IC Databases
ovsdb-tool create /var/lib/ovn/ic/ovn-ic-nb.db /usr/share/openvswitch/ovn-ic-nb.ovsschema
ovsdb-tool create /var/lib/ovn/ic/ovn-ic-sb.db /usr/share/openvswitch/ovn-ic-sb.ovsschema

ovsdb-server --remote=ptcp:6645:127.0.0.1 \
  --pidfile=/var/run/ovn/ic/ovn-ic-nb.pid \
    --log-file=/var/log/ovn/ic/ovn-ic-nb.log \
      --detach /var/lib/ovn/ic/ovn-ic-nb.db

      ovsdb-server --remote=ptcp:6646:127.0.0.1 \
        --pidfile=/var/run/ovn/ic/ovn-ic-sb.pid \
          --log-file=/var/log/ovn/ic/ovn-ic-sb.log \
            --detach /var/lib/ovn/ic/ovn-ic-sb.db

# AZ1 Setup
ovsdb-tool create /var/lib/ovn/az1/ovn-nb.db /usr/share/openvswitch/ovn-nb.ovsschema
ovsdb-tool create /var/lib/ovn/az1/ovn-sb.db /usr/share/openvswitch/ovn-sb.ovsschema

ovsdb-server --remote=ptcp:6641:127.0.0.1 \
  --pidfile=/var/run/ovn/az1/ovn-nb.pid \
    --detach /var/lib/ovn/az1/ovn-nb.db

    ovsdb-server --remote=ptcp:6642:127.0.0.1 \
      --pidfile=/var/run/ovn/az1/ovn-sb.pid \
        --detach /var/lib/ovn/az1/ovn-sb.db

        ovn-northd --ovnnb-db=tcp:127.0.0.1:6641 --ovnsb-db=tcp:127.0.0.1:6642 \
          --pidfile=/var/run/ovn/az1/ovn-northd.pid --detach

# AZ2 Setup
ovsdb-tool create /var/lib/ovn/az2/ovn-nb.db /usr/share/openvswitch/ovn-nb.ovsschema
ovsdb-tool create /var/lib/ovn/az2/ovn-sb.db /usr/share/openvswitch/ovn-sb.ovsschema

ovsdb-server --remote=ptcp:6651:127.0.0.1 \
  --pidfile=/var/run/ovn/az2/ovn-nb.pid \
    --detach /var/lib/ovn/az2/ovn-nb.db

    ovsdb-server --remote=ptcp:6652:127.0.0.1 \
      --pidfile=/var/run/ovn/az2/ovn-sb.pid \
        --detach /var/lib/ovn/az2/ovn-sb.db

        ovn-northd --ovnnb-db=tcp:127.0.0.1:6651 --ovnsb-db=tcp:127.0.0.1:6652 \
          --pidfile=/var/run/ovn/az2/ovn-northd.pid --detach

# Set AZ names

ovn-nbctl --db=tcp:127.0.0.1:6641 set NB_Global . name=az1
ovn-nbctl --db=tcp:127.0.0.1:6651 set NB_Global . name=az2

# Start IC processes
ovn-ic --ovnnb-db=tcp:127.0.0.1:6641 --ovnsb-db=tcp:127.0.0.1:6642 \
  --ic-nb-db=tcp:127.0.0.1:6645 --ic-sb-db=tcp:127.0.0.1:6646 \
    --pidfile=/var/run/ovn/az1/ovn-ic.pid --detach

    ovn-ic --ovnnb-db=tcp:127.0.0.1:6651 --ovnsb-db=tcp:127.0.0.1:6652 \
      --ic-nb-db=tcp:127.0.0.1:6645 --ic-sb-db=tcp:127.0.0.1:6646 \
        --pidfile=/var/run/ovn/az2/ovn-ic.pid --detach

        3. Create External Networks in Both AZs
        bash

# AZ1 External Network
ovn-nbctl --db=tcp:127.0.0.1:6641 ls-add external-network-az1
ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-add external-network-az1 external-port-az1
ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-type external-port-az1 localnet
ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-options external-port-az1 network_name=provider

# AZ2 External Network
ovn-nbctl --db=tcp:127.0.0.1:6651 ls-add external-network-az2
ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-add external-network-az2 external-port-az2
ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-type external-port-az2 localnet
ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-options external-port-az2 network_name=provider

4. Create Transit Switch
bash

# Create transit switch for inter-AZ communication
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 ts-add transit-switch

5. Create Routers with External and Transit Connectivity
bash

# AZ1 Router
ovn-nbctl --db=tcp:127.0.0.1:6641 lr-add router-az1

# AZ1 Router - External connection
ovn-nbctl --db=tcp:127.0.0.1:6641 lrp-add router-az1 router-az1-external \
  02:ac:10:ff:01:01 192.168.100.1/24
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-add external-network-az1 external-az1-router
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-type external-az1-router router
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-options external-az1-router \
    router-port=router-az1-external

# AZ1 Router - Transit connection
ovn-nbctl --db=tcp:127.0.0.1:6641 lrp-add router-az1 router-az1-transit \
  02:ac:10:ff:02:01 10.0.0.1/24
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-add transit-switch transit-az1
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-type transit-az1 router
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-options transit-az1 \
    router-port=router-az1-transit

# AZ2 Router
ovn-nbctl --db=tcp:127.0.0.1:6651 lr-add router-az2

# AZ2 Router - External connection
ovn-nbctl --db=tcp:127.0.0.1:6651 lrp-add router-az2 router-az2-external \
  02:ac:10:ff:01:02 192.168.100.2/24
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-add external-network-az2 external-az2-router
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-type external-az2-router router
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-options external-az2-router \
    router-port=router-az2-external

# AZ2 Router - Transit connection
ovn-nbctl --db=tcp:127.0.0.1:6651 lrp-add router-az2 router-az2-transit \
  02:ac:10:ff:02:02 10.0.0.2/24
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-add transit-switch transit-az2
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-type transit-az2 router
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-options transit-az2 \
    router-port=router-az2-transit

    6. Add Default Routes for External Connectivity
    bash

# Add default routes via external network (assuming gateway is 192.168.100.254)
ovn-nbctl --db=tcp:127.0.0.1:6641 lr-route-add router-az1 0.0.0.0/0 192.168.100.254
ovn-nbctl --db=tcp:127.0.0.1:6651 lr-route-add router-az2 0.0.0.0/0 192.168.100.254

# Add inter-AZ routes
ovn-nbctl --db=tcp:127.0.0.1:6641 lr-route-add router-az1 10.2.0.0/16 10.0.0.2
ovn-nbctl --db=tcp:127.0.0.1:6651 lr-route-add router-az2 10.1.0.0/16 10.0.0.1

7. Create Internal Networks in Each AZ
bash

# AZ1 Internal Network
ovn-nbctl --db=tcp:127.0.0.1:6641 ls-add internal-network-az1
ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-add internal-network-az1 internal-az1-router
ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-type internal-az1-router router
ovn-nbctl --db=tcp:127.0.0.1:6641 lrp-add router-az1 router-az1-internal \
  02:ac:10:01:01:01 10.1.1.1/24
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-options internal-az1-router \
    router-port=router-az1-internal

# AZ2 Internal Network
ovn-nbctl --db=tcp:127.0.0.1:6651 ls-add internal-network-az2
ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-add internal-network-az2 internal-az2-router
ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-type internal-az2-router router
ovn-nbctl --db=tcp:127.0.0.1:6651 lrp-add router-az2 router-az2-internal \
  02:ac:10:02:01:01 10.2.1.1/24
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-options internal-az2-router \
    router-port=router-az2-internal

    8. Start OVN Controller (Simulating Compute Nodes)
    bash

# Start OVN controller for both AZs (simulating they're on same chassis)
ovn-controller --pidfile --detach --log-file

# Set chassis as gateway for both AZs
ovs-vsctl set open_vswitch . external-ids:ovn-is-interconn=true

# Configure chassis for AZ1
ovs-vsctl set open_vswitch . external-ids:ovn-remote=tcp:127.0.0.1:6642
ovn-sbctl --db=tcp:127.0.0.1:6642 chassis-add gw-az1 geneve 127.0.0.1

# Configure chassis for AZ2 (you'd normally need separate chassis)
# For single system, we'll simulate this

9. Network Topology Overview

External Network (192.168.100.0/24)
    |
        br-provider (OVS Bridge)
            |
            ┌───▼────────────────┐    ┌────────────────────▼───┐
            │       AZ1          │    │        AZ2             │
            │ external-network-  │    │ external-network-      │
            │ az1                │    │ az2                    │
            │ (192.168.100.1)    │    │ (192.168.100.2)        │
            │       │            │    │        │               │
            │   router-az1       │    │    router-az2          │
            │       │            │    │        │               │
            │ internal-network-  │    │ internal-network-      │
            │ az1 (10.1.1.0/24)  │    │ az2 (10.2.1.0/24)     │
            │       │            │    │        │               │
            │   transit-az1      │    │    transit-az2         │
            └───────┼────────────┘    └────────┼───────────────┘
                    │                          │
                            └──────────┬─────────────────┘
                                               │
                                                           Transit Switch
                                                                       (10.0.0.0/24)

                                                                       10. Verification Commands
                                                                       bash

# Environment variables for convenience
export OVN_IC_NB_DB="tcp:127.0.0.1:6645"
export OVN_AZ1_NB_DB="tcp:127.0.0.1:6641"
export OVN_AZ2_NB_DB="tcp:127.0.0.1:6651"

# Check IC status
ovn-ic-nbctl --db=$OVN_IC_NB_DB show

# Check AZ configurations
ovn-nbctl --db=$OVN_AZ1_NB_DB show
ovn-nbctl --db=$OVN_AZ2_NB_DB show

# Check transit switch
ovn-ic-nbctl --db=$OVN_IC_NB_DB ts-list

# Check external networks
ovn-nbctl --db=$OVN_AZ1_NB_DB ls-list
ovn-nbctl --db=$OVN_AZ2_NB_DB ls-list

# Check routes
ovn-nbctl --db=$OVN_AZ1_NB_DB lr-route-list router-az1
ovn-nbctl --db=$OVN_AZ2_NB_DB lr-route-list router-az2

# Check OVS bridge mappings
ovs-vsctl show
ovs-vsctl list Open_vSwitch

11. Testing Connectivity
bash

# Create test VMs/namespaces (example)
# Add logical ports to internal networks and test connectivity

# Test external connectivity from both AZs
# Test inter-AZ connectivity through transit switch
# Verify external network reachability

This setup gives you a complete multi-AZ environment with external network connectivity on a single platform, perfect for development and testing!

can you add a router to the transit switch and connect the external network to that router

Absolutely! Adding a centralized router on the transit switch is a great architectural pattern. This creates a hub-and-spoke topology where the transit router handles inter-AZ routing and external connectivity. Here's the updated configuration:
Enhanced Setup with Transit Router and Centralized External Network
1. Prerequisites and Initial Setup
bash

# Same OVS bridge setup as before
ovs-vsctl add-br br-provider
ovs-vsctl add-port br-provider eth1  # or dummy-ext for testing
ovs-vsctl set open_vswitch . external-ids:ovn-bridge-mappings=provider:br-provider

# Start all the IC and AZ services (same as before)
# ... [Previous setup steps 1-2 from earlier response] ...

2. Create Transit Router with External Connectivity
bash

# Create transit router in IC database
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-add transit-router

# Create external network in IC
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 ls-add external-network-ic
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lsp-add external-network-ic external-port-ic
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lsp-set-type external-port-ic localnet
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lsp-set-options external-port-ic network_name=provider

# Connect transit router to external network
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lrp-add transit-router transit-router-external \
  02:ac:10:ff:00:01 192.168.100.1/24
  ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lsp-add external-network-ic external-ic-router
  ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lsp-set-type external-ic-router router
  ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lsp-set-options external-ic-router \
    router-port=transit-router-external

# Connect transit router to transit switch
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 ts-add transit-switch
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lrp-add transit-router transit-router-switch \
  02:ac:10:ff:00:02 10.0.0.1/24
  ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lsp-add transit-switch transit-switch-router
  ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lsp-set-type transit-switch-router router
  ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lsp-set-options transit-switch-router \
    router-port=transit-router-switch

    3. Simplified AZ Routers (No Direct External Connection)
    bash

# AZ1 Router - Only internal and transit connections
ovn-nbctl --db=tcp:127.0.0.1:6641 lr-add router-az1

# AZ1 Internal Network
ovn-nbctl --db=tcp:127.0.0.1:6641 ls-add internal-network-az1
ovn-nbctl --db=tcp:127.0.0.1:6641 lrp-add router-az1 router-az1-internal \
  02:ac:10:01:01:01 10.1.1.1/24
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-add internal-network-az1 internal-az1-router
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-type internal-az1-router router
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-options internal-az1-router \
    router-port=router-az1-internal

# AZ1 Transit connection
ovn-nbctl --db=tcp:127.0.0.1:6641 lrp-add router-az1 router-az1-transit \
  02:ac:10:ff:01:01 10.0.0.10/24
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-add transit-switch transit-az1
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-type transit-az1 router
  ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-options transit-az1 \
    router-port=router-az1-transit

# AZ2 Router - Only internal and transit connections
ovn-nbctl --db=tcp:127.0.0.1:6651 lr-add router-az2

# AZ2 Internal Network
ovn-nbctl --db=tcp:127.0.0.1:6651 ls-add internal-network-az2
ovn-nbctl --db=tcp:127.0.0.1:6651 lrp-add router-az2 router-az2-internal \
  02:ac:10:02:01:01 10.2.1.1/24
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-add internal-network-az2 internal-az2-router
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-type internal-az2-router router
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-options internal-az2-router \
    router-port=router-az2-internal

# AZ2 Transit connection
ovn-nbctl --db=tcp:127.0.0.1:6651 lrp-add router-az2 router-az2-transit \
  02:ac:10:ff:01:02 10.0.0.20/24
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-add transit-switch transit-az2
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-type transit-az2 router
  ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-options transit-az2 \
    router-port=router-az2-transit

    4. Configure Routing - Centralized Model
    bash

# Transit router routes
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-route-add transit-router \
  0.0.0.0/0 192.168.100.254  # Default route to external gateway
  ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-route-add transit-router \
    10.1.1.0/24 10.0.0.10      # Route to AZ1 internal network
    ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-route-add transit-router \
      10.2.1.0/24 10.0.0.20      # Route to AZ2 internal network

# AZ1 router routes
ovn-nbctl --db=tcp:127.0.0.1:6641 lr-route-add router-az1 \
  0.0.0.0/0 10.0.0.1          # Default via transit router
  ovn-nbctl --db=tcp:127.0.0.1:6641 lr-route-add router-az1 \
    10.2.1.0/24 10.0.0.1        # AZ2 networks via transit router

# AZ2 router routes  
ovn-nbctl --db=tcp:127.0.0.1:6651 lr-route-add router-az2 \
  0.0.0.0/0 10.0.0.1          # Default via transit router
  ovn-nbctl --db=tcp:127.0.0.1:6651 lr-route-add router-az2 \
    10.1.1.0/24 10.0.0.1        # AZ1 networks via transit router

    5. Configure NAT on Transit Router (Optional)
    bash

# Add SNAT for internal networks on transit router
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-nat-add transit-router snat \
  192.168.100.1 10.1.1.0/24
  ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-nat-add transit-router snat \
    192.168.100.1 10.2.1.0/24

# Or add DNAT for specific services
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-nat-add transit-router dnat_and_snat \
  192.168.100.10 10.1.1.10    # Example: expose AZ1 service
  ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-nat-add transit-router dnat_and_snat \
    192.168.100.20 10.2.1.10    # Example: expose AZ2 service

    6. Updated Network Topology

    External Network (192.168.100.0/24)
               |
                          | 192.168.100.1
                              ┌──────▼──────┐
                                  │Transit      │ 
                                      │Router       │ (IC Database)
                                          │             │
                                              └──────┬──────┘
                                                         | 10.0.0.1
                                                             Transit Switch (10.0.0.0/24)
                                                                        |
                                                                            ┌──────┼──────┐
                                                                                |             |
                                                                                10.0.0.10         10.0.0.20
                                                                                ┌───▼────┐      ┌────▼───┐
                                                                                │router- │      │router- │
                                                                                │az1     │      │az2     │
                                                                                └───┬────┘      └────┬───┘
                                                                                    |                |
                                                                                    10.1.1.1          10.2.1.1
                                                                                    ┌───▼────┐      ┌────▼───┐
                                                                                    │AZ1     │      │AZ2     │
                                                                                    │Internal│      │Internal│
                                                                                    │Network │      │Network │
                                                                                    └────────┘      └────────┘

                                                                                    7. Gateway Configuration
                                                                                    bash

# Configure gateway chassis for transit router
# Since we're on single system, we'll use the same chassis for all

# Set chassis as interconnect gateway
ovs-vsctl set open_vswitch . external-ids:ovn-is-interconn=true

# The gateway will handle traffic for all routers
# In production, you'd have dedicated gateway nodes

8. Verification Commands
bash

# Check IC topology
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 show

# Check transit router
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-list
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-route-list transit-router

# Check AZ routers
ovn-nbctl --db=tcp:127.0.0.1:6641 lr-route-list router-az1
ovn-nbctl --db=tcp:127.0.0.1:6651 lr-route-list router-az2

# Check NAT rules (if configured)
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 lr-nat-list transit-router

# Verify transit switch connections
ovn-ic-nbctl --db=tcp:127.0.0.1:6645 ts-list
ovn-ic-sbctl --db=tcp:127.0.0.1:6646 list Port_Binding | grep transit

9. Add Test VMs/Ports
bash

# Add test ports to internal networks
# AZ1 Test VM
ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-add internal-network-az1 vm1-az1
ovn-nbctl --db=tcp:127.0.0.1:6641 lsp-set-addresses vm1-az1 "02:ac:10:01:01:10 10.1.1.10"

# AZ2 Test VM  
ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-add internal-network-az2 vm1-az2
ovn-nbctl --db=tcp:127.0.0.1:6651 lsp-set-addresses vm1-az2 "02:ac:10:02:01:10 10.2.1.10"

10. Traffic Flow Examples

External → AZ1 VM:
External → Transit Router → Transit Switch → AZ1 Router → AZ1 Internal → VM

AZ1 VM → AZ2 VM:
AZ1 Internal → AZ1 Router → Transit Switch → AZ2 Router → AZ2 Internal → VM

AZ1 VM → External:
AZ1 Internal → AZ1 Router → Transit Switch → Transit Router → External

11. Advantages of This Architecture

    Centralized External Connectivity: Single point for external network policies
        Simplified Routing: Hub-and-spoke model is easier to manage
            Centralized NAT: All NAT rules managed in one place
                Scalable: Easy to add more AZs
                    Security: Single external entry point for security policies

                    This setup provides a clean, centralized architecture where the transit router acts as the hub for all external connectivity and inter-AZ routing!
