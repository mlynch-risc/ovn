# Uncrustify configuration for OVN (Open Virtual Network) coding standards
# Based on: https://docs.ovn.org/en/stable/internals/contributing/coding-style.html

# General options
newlines                                 = lf        # Use LF line endings
input_tab_size                          = 4         # Tab interpretation
output_tab_size                         = 4         # Tab output size
indent_columns                          = 4         # 4 spaces per indent level
indent_with_tabs                        = 0         # Use spaces, not tabs
indent_label                            = -4        # Unindent labels by 4 spaces
indent_align_assign                     = false

# Indentation
indent_brace                            = 0         # Don't indent braces
indent_braces                           = false
indent_braces_no_func                   = false
indent_braces_no_class                  = false
indent_braces_no_struct                 = false
indent_switch_case                      = 4         # Indent case statements

# BSD-style brace placement
nl_fdef_brace                           = force     # Newline before function definition brace
nl_enum_brace                           = remove    # Newline before enum brace
nl_struct_brace                         = remove    # Newline before struct brace
nl_union_brace                          = force     # Newline before union brace
nl_if_brace                             = remove    # Newline before if brace
nl_brace_else                           = remove    # Newline before else
nl_elseif_brace                         = remove    # Newline before else-if brace
nl_else_brace                           = remove    # Newline before else brace
nl_else_if                              = remove    # No newline between else and if
nl_brace_while                          = add       # Newline before while in do-while
nl_while_brace                          = remove    # Newline before while brace
nl_for_brace                            = remove    # Newline before for brace
nl_do_brace                             = add       # Newline before do brace
nl_switch_brace                         = remove    # Newline before switch brace

# Function definitions - return type on separate line
nl_func_type_name                       = force     # Newline between return type and function name
nl_func_proto_type_name                 = remove    # Keep return type and name together in prototypes
nl_func_paren                           = remove    # No space between function name and (
nl_func_decl_start                      = remove
nl_func_decl_end                        = remove
nl_func_decl_empty                      = remove

# Braces
mod_full_brace_if                       = force     # Always use braces for if
mod_full_brace_for                      = force     # Always use braces for for
mod_full_brace_while                    = force     # Always use braces for while
mod_full_brace_do                       = force     # Always use braces for do

# Spacing
sp_before_sparen                        = force     # Space before ( in if/while/for/switch
sp_after_sparen                         = force     # Space after ) in if/while/for/switch
sp_inside_paren                         = remove    # No space inside parentheses
sp_inside_fparen                        = remove    # No space inside function parentheses
sp_inside_square                        = remove    # No space inside square brackets
sp_paren_paren                          = remove    # No space between nested parentheses
sp_before_ptr_star                      = force     # Pointer: int *x not int* x
sp_after_ptr_star                       = remove    # Pointer: int *x not int*x
sp_between_ptr_star                     = remove    # Multiple pointers: int **x
sp_after_ptr_star_func                  = force     # Function pointers

# Binary operators - one space on each side
sp_arith                                = force     # Space around arithmetic operators
sp_assign                               = force     # Space around assignment operators
sp_bool                                 = force     # Space around boolean operators
sp_compare                              = force     # Space around comparison operators
sp_before_assign                        = force
sp_after_assign                         = force
sp_enum_assign                          = force     # Space around = in enum
sp_pp_concat                            = remove    # Space around ## in macros
sp_pp_stringify                         = remove    # No space before # in macros

# Unary operators
sp_incdec                               = remove    # No space in ++ or --
sp_incdec                               = remove 
sp_before_nl_cont                       = force     # Space before line continuation
sp_after_cast                           = force     # Space after cast: (void *) 0

# Special cases
sp_sizeof_paren                         = force     # Space after sizeof
sp_before_comma                         = remove    # No space before comma
sp_after_comma                          = force     # Space after comma
sp_before_semi                          = remove    # No space before semicolon
sp_after_semi_for                       = force     # Space after ; in for loop
sp_after_semi                           = force     # Space after ; generally

# Comments
cmt_star_cont                           = true      # Continue * in multiline comments
cmt_indent_multi                        = true      # Indent multiline comments

# Code alignment - generally avoid
align_var_def_span                      = 0         # Don't align variable definitions
align_var_def_star_style                = 1         # Pointer alignment
align_var_def_amp_style                 = 1         # Reference alignment
align_assign_span                       = 0         # Don't align assignments
align_enum_equ_span                     = 0         # Don't align enum assignments
align_typedef_span                      = 0         # Don't align typedefs
align_func_proto_span                   = 0         # Don't align function prototypes

# Blank lines
nl_max_blank_in_func                    = 2         # Max blank lines in functions
nl_before_block_comment                 = 2         # Blank lines before block comments
nl_after_func_body                      = 2         # Blank lines after functions
nl_after_func_proto                     = 1         # Blank line after function prototype
nl_after_func_proto_group               = 2         # Blank lines after function prototype group

# Switch statements
indent_switch_case                      = 4         # Indent case by 4 spaces
nl_case_colon_brace                     = remove    # No newline between case: and {
nl_after_case                           = false     # No forced newline after case

# Preprocessor
pp_indent                               = remove    # Don't indent preprocessor directives
pp_space_after                          = remove    # No space after # in directives

# Line splitting
code_width                              = 80        # Target line width
ls_for_split_full                       = true      # Split for statement
ls_func_split_full                      = true      # Split function

# Positioning
pos_arith                               = trail     # Arithmetic operators at end of line
pos_assign                              = trail     # Assignment operators at end of line
pos_bool                                = trail     # Boolean operators at end of line
pos_compare                             = trail     # Comparison operators at end of line
pos_conditional                         = lead      # Ternary ? and : at start of line

# Miscellaneous
nl_end_of_file                          = force     # Ensure newline at end of file
nl_end_of_file_min                      = 1
eat_blanks_after_open_brace             = true      # Remove blank line after {
eat_blanks_before_close_brace           = true      # Remove blank line before }
mod_remove_extra_semicolon              = true      # Remove extra semicolons

# Iterator Macro
set macro_func_call SHASH_FOR_EACH
set macro_func_call HMAP_FOR_EACH_WITH_HASH
set macro_func_call HMAP_FOR_EACH
set macro_func_call SBREC_ACL_ID_TABLE_FOR_EACH
set macro_func_call HMAP_FOR_EACH_POP
set macro_func_call HMAP_FOR_EACH_SAFE
set macro_func_call HMAP_FOR_EACH
set macro_func_call SBREC_HA_CHASSIS_GROUP_TABLE_FOR_EACH
set macro_func_call SSET_FOR_EACH
set macro_func_call SHASH_FOR_EACH_SAFE
set macro_func_call SSET_FOR_EACH
set macro_func_call HMAP_FOR_EACH_WITH_HASH
set macro_func_call HMAP_FOR_EACH_POP 
set macro_func_call SHASH_FOR_EACH_SAFE
set macro_func_call LIST_FOR_EACH
set macro_func_call SBREC_PORT_BINDING_TABLE_FOR_EACH
set macro_func_call VECTOR_FOR_EACH
set macro_func_call LIST_FOR_EACH 
set macro_func_call SHASH_FOR_EACH_SAFE

